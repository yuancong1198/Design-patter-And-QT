策略模式（类似状态模式）：就是定义了不同的算法，并且算法之间可以相互替换，此模式让算法的变化独立于使用算法的客户。

策略模式属于对象行为型模式，主要针对一组算法，将每一个算法封装到具有相同接口的独立的类中，从而使他们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。通常，策略模式适用于当一个应用程序需要实现一种特定的服务或者功能，而且该程序有多种实现方式时使用。

策略模式中有三个对象：
（1）环境对象：该类中实现了对抽象策略中定义接口的引用。
（2）抽象策略对象：可由接口或抽象类来实现。
（3）具体策略对象：它封装了实现相同功能的不同算法。
利用策略模式构建应用程序，可以根据用户配置的内容，选择不同的算法来实现应用程序的功能。具有的选择由环境对象来完成。采用策略模式可以避免由于使用条件语句而带来的代码混乱，从而提高应用程序的灵活性和条理性。

策略模式的中心：不是如何实现算法，而是如何组织/调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。
算法的平等性：各个算法都是平等的，因此各个算法之间可以相互替换。

所遇到的问题：
	客户端程序直接包含业务算法代码的话会变的复杂，这样会使客户程序庞大且难以维护，尤其是需要支持多种业务算法时。
	不同的时候需要不同的算法，我们不想支持我们并不使用的业务算法。
	当业务功能是客户程序的一个难以分割的成分时，增加新的业务算法或改变现有算法将十分困难。
	策略模式定义一些类来封装不同的业务算法，从而避免上述问题。

策略模式的使用场合：
	许多相关类仅仅是行为不同。
	需要使用一个算法的不同实现。
	算法使用了客户不应该知道的数据。策略模式可以避免暴露复杂的、与算法相关的数据结构。
	一个类定义了很多行为，而且这些行为在这个类里的操作以多个条件语句的形式出现。策略模式将相关的条件分支移入它们各自的 Strategy 类中以代替这些条件语句。