1. Boost/Signals2的使用：
    signals2基于Booost的另一个库sgnals,实现了线程安全的观察者模式，在signals2库中，观察者模式被称为信号/插槽(signals and slots),它是一种函数回调机制，一个信号关联了
多个插槽，当信号发生时，所有关联它的插槽都会被调用。
    实例：
    #include <iostream>
    #include <boost/signals2.hpp>
    #include <boost/bind.hpp>
    using namespace boost::signals2;
    using namespace std;

    void slotsGlobleFun(int param)
    {
        cout<<"Globel Fun Called"<<endl;
    }

    class A
    {
    public:
        static void slotsStaticFun(int param){
            cout<<"Static Fun Called"<<endl;
        }
        void slotsMemberFun(int param){
            cout<<"Member Fun Called"<<endl;
        }
    };

    void bind_main()
    {
        typedef signal<void(int)> signal_t;
        signal_t sig;
        A a;
        connection c1 = sig.connect(slotsGlobleFun);//普通全局函数
        connection c2 = sig.connect(A::slotsStaticFun);//类静态成员函数
        connection c3 = sig.connect(boost::bind(&A::slotsMemberFun,a,_1));//类成员函数
        sig(1);
    }


2. QT使用:
    (一）信号和槽
        （1）信号和槽通常用于对象间的通信。信号和槽机制是QT的主要特性并且也很有可能与其他框架特性区别最大的部分。
        （2）使用信号和槽之前所用到的技术
             Older toolkits使用回调（callbacks)来达到这样的目的。回调是一个指向函数的指针，所以你希望一个处理函数通知你某些事件发生了，你可以传递一个指向其他函数的指针
        （回调函数指针）给它。这个处理函数将在适当的时候调用回调函数。
         回调函数有两个明显的缺点：第一，它们不是类型安全，我们永远不能确定调用者是否将通过正确的参数来调用回调函数。第二，回调函数和处理函数是紧耦合的，因为调用者必须
         知道应该在什么时候调用哪个回调函数。
         （3）Qt使用信号和槽来代替回调函数
            当一个特定的事件发生时，信号会被发送出去。槽则是对一个特定的信号进行反馈。
            信号和槽机制是类型安全的：一个信号的参数必须和接受槽的参数匹配（槽的参数可以比它接收的信号的参数短），由于这种匹配机制，编译器可以帮助我们检查类型不匹配的签名。
            信号和槽机制是松耦合的：由于采用的是观察者模式，一个发出的信号既不知道也不关心哪个槽接收到这个信号。
        实例：
            QOBJET_T
            signals:
            void CustomSinals(int);
            public slots:
            void CustomSlots(int);
            连接：
                connect(this,SIGNAL(CustomSinals(int)),this,SLOT(CustomSlots(int)));
            调用：
                CustomSinals(1);
3. MVC模型（模型-视图-控制器）中使用
    MVC模型是一种非常灵活的对于大数据集的可视化方法。在MVC方法中，模型代表数据集，它对需要查看数据的获取以及任何存储的改变负责。每种类型的数据集都有自己的模型，但不管底层的
数据集是什么样子，模型提供给视图的API都是相同的。视图代表的是面向用户的那些数据。在同一时间，任何大数据集只有有限的部分是可见的，所以这个有限的部分就是视图所请求的那部分数据。
控制器是用户和视图间的媒介，它把用户的操作转换为浏览或者编辑数据的请求，这部分数据是根据需要由视图传送给模型的数据。