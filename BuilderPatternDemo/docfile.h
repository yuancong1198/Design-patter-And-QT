#pragma once

/*
一、 定义
	建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。

二、角色
	Builder（抽象建造者）：为创建一个产品对象的各个部件指定抽象接口。

	ConcreteBuilder（具体建造者）：实现 Builder 的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口。

	Director（指挥者）：构造一个使用 Builder 接口的对象。

	Product（产品）：表示被构造的复杂对象。ConcreteBuilder 创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，
				包括将这些部件装配成最终产品的接口。

三、作用
	Builder模式和AbstractFactory模式在功能上很相似，因为都是用来创建大的复杂的对象，它们的区别是：Builder模式强调的是一步步创建对象，
	并通过相同的创建过程可以获得不同的结果对象，一般来说Builder模式中对象不是直接返回的。而在AbstractFactory模式中对象是直接返回的，
	AbstractFactory模式强调的是为创建多个相互依赖的对象提供一个同一的接口。

四、使用场景
	1)当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。

	2)当构造过程必须允许被构造的对象有不同的表示时。

五、建造者模式和工厂模式的区别

	建造者模式最主要功能是基本方法的调用顺序安排，也就是这些基本方法已经实现了；

	而工厂方法则重点是创建，你要什么对象我创造一个对象出来，组装顺序则不是他关心的。

	建造者模式使用的场景，一是产品类非常的复杂，或者产品类中的调用顺序不同产生了不同的效能，这个时候使用建造者模式是非常合适
*/