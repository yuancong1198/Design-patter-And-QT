	Facade门面模式（外观模式）：使用Facade模式的类：为子系统中的接口提供一个统一的接口。Facade定义的高级接口使得更容易（且安全地）使用子系统。如果类接口由于太复杂而无法有效地使用时（导致难以调试错误），或者没有使用与大型框架相应的编程风格，则应使用Facade模式。Facade模式的另一种用法是将使用某个特定库的代码与应用的其他部分区别开，以达到减少库间依赖性的目的。Facade是一个类（或者类集），它具有清晰/简单的接口，封装且隐藏了复杂的类集或者函数集。两种密集相关的设计模式是封装器（wrapper）和适配器（adaptor），其中一种设计模式的某些例子，可以用另一种设计模式体现。
	
	许多核心QT类都是具有一些用于不同平台的原始类的Facade设计模式，他们的实现要比表象复杂得多。列如，QString是一个具有可增长的/被隐藏共享的字符数组的封装器；QWidget是一个具有原始窗件的封装器；而QThread，QFile，QProcess和QSqlDatabase是具有低级库的封装器，这些库根据平台的情况有相当不同的实现。如果只通过QtAPI使用这些封装器，则代码就可以运行于全部平台上。
	从复用具有不同接口的类中获得的经验，能够为设计自己的类中成熟的/友好的/有用的接口提供有价值的帮助。