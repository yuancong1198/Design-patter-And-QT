#pragma once


/*
    命令模式（Command pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传递给调用对象。
        调用对象寻找可以处理该命令的合适对象，并把该命令传给相应的对象。
        （将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化。对请求排队或记录请求日志，以及支持可撤销的操作。在OOP中，一切都是对象，将请求封装成对象，符合OOP的
        设计思想，当将客户的单个请求封装成对象以后，我们就可以对这个请求存储更多的信息，使请求拥有更多的能力；命令模式同样能够把请求发送者和接受者解耦，使得命令发送者不用去关心
        请求以何种方式被处理）
    命令模式（Commmand）将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志以及支持可撤销的操作。


                            ------------->Invoker----------->Command
                            ^                                  ^
                            |                                  |
                            |                                  |
                         Client------->Receiver<-------ConcreteCommand

    Command:声明执行操作的接口；
    ConCreteCommand:将一个接受者对象绑定于一个动作，之后，调用接受者相应的操作，以实现Execute来完成相应的命令。
    Client:创建一个具体命令对象，但是并没有设定它的接收者。
    Invoker:要求该命令执行这个请求。
    Receiver:知道如何实施与执行一个请求相关的操作，任何类都可能作为一个接收者。
    协作方式：
        1. Client创建一个ConcreteCommand命令对象，并指定它的Receiver对象。
        2. Invoker对象存储该ConcreteCommand对象。
        3. 该Invoker通过调用Commmand对象的Excute操作来提交一个请求。如果这个命令请求是可以撤销的，ConcreteCommand就执行之前存储当前状态以用于取消该命令请求；
        4. ConcreteCommand对象调用Receiver的一些操作以执行该请求。
*/