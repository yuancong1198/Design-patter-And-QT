#pragma once

/*
	中介者模式：用一个中介对象封装一系列的对象交互，中介者使各个对象之间不需要显式的相互调用，从而使其耦合松散，
而且可以独立的改变他们之间的交互。
*/

//优点
/*
（1）适当地使用中介者模式可以避免同事类之间的过度耦合，使得各同事类之间可以相对独立地使用。

（2）使用中介者模式可以将对象的行为和协作进行抽象，能够比较灵活的处理对象间的相互作用。

（3）使用中介者模式可以将对象间多对多的关联转变为一对多的关联，使对象间的关系易于理解和维护
*/
//缺点
/*
	中介者模式是一种比较常用的模式，也是一种比较容易被滥用的模式。对于大多数的情况，同事类之间的关系不会复杂到混乱不堪的网状结构，
因此，大多数情况下，将对象间的依赖关系封装的同事类内部就可以的，没有必要非引入中介者模式。滥用中介者模式，只会让事情变的更复杂。
所以，我们决定使用中介者模式之前要多方考虑、权衡利弊。
*/

//适应场景
/*
以下情况下可以考虑使用中介者模式：
（1）同事类之间是网状结构的关系，可以考虑使用中介者模式。它会将网状结构变为星状结构，使同事类之间的关系变的清晰一些。

（2）一个对象引用很多对象，并直接跟这些对象交互，导致难以复用该对象，可以采用中介者模式，把这个对象跟其他对象的交互封装到中介者对象里面。
*/

/*
 相关模式
（1）中介者模式与外观模式
　　①外观模式多用来封装一个子系统内部的多个模式，目的是向子系统外部提供简单易用的接口。也就是说外观模式封装的是子系统外部和子系统内部模块间的交互。
	而中介者模式是提供多个平等的同事对象之间交互关系的封装，一般是用在内部实现上。

　　②外观模式的实现是单向的交互，是从子系统外部来调用子系统内部，不会反着过来；而中介者模式实现是内部多个模块间多向的交互。
（2）中介者模式和观察者模式

　　中介者模式可以结合观察者模式来实现当同事对象发生改变的时候，通知中介对象，让中介对象去进行与其他相关对象的交互。

*/